// Code generated by tygo. DO NOT EDIT.
import { PlatformUser } from "./eureka-dovewing"
import * as ext from "./ext"
import * as discordgo from "./discordgo"
import * as silverpelt from "./silverpelt"

//////////
// source: auth.go

export interface AuthorizeRequest {
  code: string;
  redirect_uri: string;
  protocol: string;
  scope: string;
}
export interface UserSession {
  id: string;
  name?: string;
  user_id: string;
  created_at: string /* RFC3339 */;
  type: string;
  expiry: string /* RFC3339 */;
}
export interface CreateUserSession {
  name: string;
  type: string;
  expiry: number /* int64 */;
}
export interface CreateUserSessionResponse {
  user_id: string;
  token: string;
  session_id: string;
  expiry: string /* RFC3339 */;
}
export interface UserSessionList {
  sessions: (UserSession | undefined)[];
}
export interface TestAuth {
  auth_type: string;
  target_id: string;
  token: string;
}

//////////
// source: bot.go

export interface BotState {
  commands: silverpelt.CanonicalCommand[];
  settings: silverpelt.CanonicalConfigOption[];
  command_permissions: { [key: string]: string[]};
}

//////////
// source: common.go

/**
 * API configuration data
 */
export interface ApiConfig {
  main_server: string;
  support_server_invite: string;
  client_id: string;
}
/**
 * A link is any extra link
 */
export interface Link {
  name: string;
  value: string;
}
/**
 * SEO object (minified bot/user/server for seo purposes)
 */
export interface SEO {
  name: string;
  id: string;
  avatar: string;
  short: string;
}
/**
 * This represents a IBL Popplio API Error
 */
export interface ApiError {
  context?: { [key: string]: string};
  message: string;
}
export interface ApiErrorWith<T extends any> {
  data?: T;
  context?: { [key: string]: string};
  message: string;
}
/**
 * Paged result common
 */
export interface PagedResult<T extends any> {
  count: number /* uint64 */;
  per_page: number /* uint64 */;
  results: T;
}
/**
 * A clearable is a value that can be either cleared or set
 */
export interface Clearable<T extends any> {
  clear: boolean;
  value?: T;
}

//////////
// source: guild.go

export interface DashboardGuild {
  id: string;
  name: string;
  avatar: string;
  permissions: number /* int64 */;
}
export interface DashboardGuildData {
  guilds: (DashboardGuild | undefined)[];
  has_bot: string[];
  unknown_guilds: string[];
}
export interface GuildStaffTeam {
  members: GuildStaffMember[];
  roles: GuildStaffRoles[];
}
/**
 * Note: not all fields in `guild_members` are included
 */
export interface GuildStaffRoles {
  role_id: string;
  perms: string[];
  index: number /* int */;
  display_name?: string;
}
/**
 * Note: not all fields in `guild_members` are included
 */
export interface GuildStaffMember {
  user?: PlatformUser /* from eureka-dovewing.ts */;
  role: string[];
  public: boolean;
}
export interface ExecuteTemplateRequest {
  args: any;
  template: string;
}
export interface ExecuteTemplateResponse {
  Ok?: {
    result: any;
  };
  ExecErr?: {
    error: string;
  };
}

//////////
// source: ioauth.go

export interface IOAuthRedirect {
  dest: string;
  scopes: string[];
}
export interface IOAuthOutput {
  access_token: string;
  refresh_token: string;
  expires_in: number /* int */; // Seconds
  scope: string; // Scopes as returned by discord
  scopes: string[]; // Scopes as a slice
  discord_user?: any /* discordgo.User */; // The discord user
  user_guilds?: (any /* discordgo.UserGuild */ | undefined)[]; // The guilds the user is in if 'guilds' is in the scopes
}
export interface IOAuthDiscordError {
  context: { [key: string]: any};
  message: string;
}

//////////
// source: settings.go

/**
 * SettingsExecute allows execution of a settings operation
 */
export interface SettingsExecute {
  operation: any /* silverpelt.CanonicalOperationType */;
  setting: string;
  fields: Record<string, any>;
}
/**
 * SettingsExecuteResponse is the response to a settings operation
 */
export interface SettingsExecuteResponse {
  fields: Record<string, any>[];
}
/**
 * SettingsGetSuggestions allows getting dynamic suggestions for a setting
 */
export interface SettingsGetSuggestions {
  operation: any /* silverpelt.CanonicalOperationType */;
  module: string;
  setting: string;
  column: string;
  filter?: string;
}
/**
 * SettingsGetSuggestionSuggestion is a suggestion for a setting
 */
export interface SettingsGetSuggestionSuggestion {
  id: any;
  value: any;
}
export interface SettingsGetSuggestionsResponse {
  suggestions: SettingsGetSuggestionSuggestion[];
}

//////////
// source: stats.go

export interface ShardConn {
  status: string;
  real_latency: number /* int64 */;
  guilds: number /* int64 */;
  uptime: number /* int64 */;
  total_uptime: number /* int64 */;
}
export interface GetStatusResponse {
  resp: StatusEndpointResponse;
  shard_conns: { [key: number /* int64 */]: ShardConn};
  total_guilds: number /* int64 */;
}
export interface StatusEndpointResponse {
  uptime: number /* int64 */;
  managers: StatusEndpointManager[];
}
export interface StatusEndpointManager {
  display_name: string;
  shard_groups: ShardGroup[];
}
export interface ShardGroup {
  shards: number /* int64 */[][];
}
export interface Resp {
  ok: boolean;
  data?: StatusEndpointResponse;
}

//////////
// source: users.go

/**
 * Represents a user on Antiraid
 */
export interface User {
  user?: PlatformUser /* from eureka-dovewing.ts */;
  state: string;
  vote_banned: boolean;
  created_at: string /* RFC3339 */;
  updated_at: string /* RFC3339 */;
}
export interface UserGuildBaseData {
  owner_id: string;
  name: string;
  icon?: string;
  roles: ext.SerenityRole[];
  user_roles: string[];
  bot_roles: string[];
  channels: ext.GuildChannelWithPermissions[];
  finished_onboarding: boolean;
}
