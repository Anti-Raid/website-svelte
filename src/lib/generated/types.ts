// Code generated by tygo. DO NOT EDIT.
import { PlatformUser } from "./eureka-dovewing"
import * as discordgo from "./discordgo"

//////////
// source: auth.go

export interface AuthorizeRequest {
  code: string;
  redirect_uri: string;
  protocol: string;
  scope: string;
}
export interface UserSession {
  id: string;
  name?: string;
  user_id: string;
  created_at: string /* RFC3339 */;
  type: string;
  expiry: string /* RFC3339 */;
}
export interface CreateUserSession {
  name: string;
  type: string;
  expiry: number /* int64 */;
}
export interface CreateUserSessionResponse {
  user_id: string;
  token: string;
  session_id: string;
  expiry: string /* RFC3339 */;
}
export interface UserSessionList {
  sessions: (UserSession | undefined)[];
}
export interface TestAuth {
  auth_type: string;
  target_id: string;
  token: string;
}

//////////
// source: bot.go

export interface BotState {
  commands: CanonicalCommand[];
  settings: CanonicalConfigOption[];
  command_permissions: { [key: string]: string[]};
}
export interface CanonicalCommandArgument {
  name: string;
  description?: string;
  required: boolean;
  choices: string[];
}
export interface CanonicalCommand {
  name: string;
  qualified_name: string;
  description?: string;
  nsfw: boolean;
  subcommands: CanonicalCommand[];
  subcommand_required: boolean;
  arguments: CanonicalCommandArgument[];
}
export interface CanonicalSettingsError {
  OperationNotSupported?: {
    operation: CanonicalOperationType;
  };
  Generic?: {
    message: string;
    src: string;
    typ: string;
  };
  SchemaTypeValidationError?: {
    column: string;
    expected_type: string;
    got_type: string;
  };
  SchemaNullValueValidationError?: {
    column: string;
  };
  SchemaCheckValidationError?: {
    column: string;
    check: string;
    error: string;
    accepted_range: string;
  };
  MissingOrInvalidField?: {
    field: string;
    src: string;
  };
  RowExists?: {
    column_id: string;
    count: number /* int64 */;
  };
  RowDoesNotExist?: {
    column_id: string;
  };
  MaximumCountReached?: {
    max: number /* uint64 */;
    current: number /* uint64 */;
  };
}
export interface CanonicalColumnType {
  Scalar?: {
    inner: CanonicalInnerColumnType;
  };
  Array?: {
    inner: CanonicalInnerColumnType;
  };
}
export interface CanonicalInnerColumnType {
  Uuid?: {
  };
  String?: {
    min_length?: number /* int */;
    max_length?: number /* int */;
    allowed_values?: string[];
    kind?: string;
  };
  Timestamp?: {
  };
  TimestampTz?: {
  };
  Interval?: {
  };
  Integer?: {
  };
  Float?: {
  };
  BitFlag?: {
    values: Record<string, number /* int64 */>;
  };
  Boolean?: {
  };
  Json?: {
    max_bytes?: number /* int */;
  };
}
export interface CanonicalColumnSuggestion {
  Static?: {
    suggestions: string[];
  };
  None?: {
  };
}
export interface CanonicalColumn {
  id: string;
  name: string;
  description: string;
  column_type: CanonicalColumnType;
  nullable: boolean;
  suggestions: CanonicalColumnSuggestion;
  secret: boolean;
  ignored_for: CanonicalOperationType[];
}
export type CanonicalOperationType = string;
export const View: CanonicalOperationType = "View";
export const Create: CanonicalOperationType = "Create";
export const Update: CanonicalOperationType = "Update";
export const Delete: CanonicalOperationType = "Delete";
export interface CanonicalConfigOption {
  id: string;
  name: string;
  description: string;
  primary_key: string;
  title_template: string;
  columns: CanonicalColumn[];
  operations: CanonicalOperationType[];
}

//////////
// source: common.go

/**
 * API configuration data
 */
export interface ApiConfig {
  main_server: string;
  support_server_invite: string;
  client_id: string;
}
/**
 * A link is any extra link
 */
export interface Link {
  name: string;
  value: string;
}
/**
 * SEO object (minified bot/user/server for seo purposes)
 */
export interface SEO {
  name: string;
  id: string;
  avatar: string;
  short: string;
}
/**
 * This represents a IBL Popplio API Error
 */
export interface ApiError {
  context?: { [key: string]: string};
  message: string;
}
export interface ApiErrorWith<T extends any> {
  data?: T;
  context?: { [key: string]: string};
  message: string;
}
/**
 * Paged result common
 */
export interface PagedResult<T extends any> {
  count: number /* uint64 */;
  per_page: number /* uint64 */;
  results: T;
}
/**
 * A clearable is a value that can be either cleared or set
 */
export interface Clearable<T extends any> {
  clear: boolean;
  value?: T;
}

//////////
// source: ext_types.go

export type Permissions = string;
/**
 * 	A role tags object from serenity because discordgo doesnt actually support this
 * /// The Id of the bot the [`Role`] belongs to.
 * 	pub bot_id: Option<UserId>,
 * 	/// The Id of the integration the [`Role`] belongs to.
 * 	pub integration_id: Option<IntegrationId>,
 * 	/// Whether this is the guild's premium subscriber role.
 * 	#[serde(default, skip_serializing_if = "is_false", with = "bool_as_option_unit")]
 * 	pub premium_subscriber: bool,
 * 	/// The id of this role's subscription sku and listing.
 * 	pub subscription_listing_id: Option<SkuId>,
 * 	/// Whether this role is available for purchase.
 * 	#[serde(default, skip_serializing_if = "is_false", with = "bool_as_option_unit")]
 * 	pub available_for_purchase: bool,
 * 	/// Whether this role is a guild's linked role.
 * 	#[serde(default, skip_serializing_if = "is_false", with = "bool_as_option_unit")]
 * 	pub guild_connections: bool,
 */
export interface SerenityRoleTags {
  bot_id?: string;
  integration_id?: string;
  premium_subscriber: boolean;
  subscription_listing_id?: string;
  available_for_purchase: boolean;
  guild_connections: boolean;
}
/**
 * 		A role object from serenity because discordgo's Role object is garbage
 * 	    pub id: RoleId,
 * 	    pub guild_id: GuildId,
 * 	    pub colour: Colour,
 * 	    pub name: FixedString<u32>,
 * 	    pub permissions: Permissions,
 * 	    pub position: i16,
 * 	    pub tags: RoleTags,
 * 	    pub icon: Option<ImageHash>,
 * 	    pub unicode_emoji: Option<FixedString<u32>>,
 */
export interface SerenityRole {
  id: string;
  guild_id: string;
  color: number /* int */;
  name: string;
  permissions?: Permissions;
  position: number /* int16 */;
  tags?: SerenityRoleTags;
  icon?: string;
  unicode_emoji: string;
}
export interface GuildChannelWithPermissions {
  user: Permissions;
  bot: Permissions;
  channel?: discordgo.Channel;
}

//////////
// source: guild.go

export interface DashboardGuild {
  id: string;
  name: string;
  avatar: string;
  permissions: number /* int64 */;
}
export interface DashboardGuildData {
  guilds: (DashboardGuild | undefined)[];
  has_bot: string[];
  unknown_guilds: string[];
}
export interface GuildStaffTeam {
  members: GuildStaffMember[];
  roles: GuildStaffRoles[];
}
/**
 * Note: not all fields in `guild_members` are included
 */
export interface GuildStaffRoles {
  role_id: string;
  perms: string[];
  index: number /* int */;
  display_name?: string;
}
/**
 * Note: not all fields in `guild_members` are included
 */
export interface GuildStaffMember {
  user?: PlatformUser /* from eureka-dovewing.ts */;
  role: string[];
  public: boolean;
}
export interface ExecuteTemplateRequest {
  args: any;
  template: string;
}
export interface ExecuteTemplateResponse {
  Ok?: {
    result: any;
  };
  ExecErr?: {
    error: string;
  };
}

//////////
// source: ioauth.go

export interface IOAuthRedirect {
  dest: string;
  scopes: string[];
}
export interface IOAuthOutput {
  access_token: string;
  refresh_token: string;
  expires_in: number /* int */; // Seconds
  scope: string; // Scopes as returned by discord
  scopes: string[]; // Scopes as a slice
  discord_user?: any /* discordgo.User */; // The discord user
  user_guilds?: (any /* discordgo.UserGuild */ | undefined)[]; // The guilds the user is in if 'guilds' is in the scopes
}
export interface IOAuthDiscordError {
  context: { [key: string]: any};
  message: string;
}

//////////
// source: settings.go

/**
 * SettingsExecute allows execution of a settings operation
 */
export interface SettingsExecute {
  operation: CanonicalOperationType;
  setting: string;
  fields: Record<string, any>;
}
/**
 * SettingsExecuteResponse is the response to a settings operation
 */
export interface SettingsExecuteResponse {
  fields: Record<string, any>[];
}
/**
 * SettingsGetSuggestions allows getting dynamic suggestions for a setting
 */
export interface SettingsGetSuggestions {
  operation: CanonicalOperationType;
  module: string;
  setting: string;
  column: string;
  filter?: string;
}
/**
 * SettingsGetSuggestionSuggestion is a suggestion for a setting
 */
export interface SettingsGetSuggestionSuggestion {
  id: any;
  value: any;
}
export interface SettingsGetSuggestionsResponse {
  suggestions: SettingsGetSuggestionSuggestion[];
}

//////////
// source: stats.go

export interface ShardConn {
  status: string;
  real_latency: number /* int64 */;
  guilds: number /* int64 */;
  uptime: number /* int64 */;
  total_uptime: number /* int64 */;
}
export interface GetStatusResponse {
  resp: StatusEndpointResponse;
  shard_conns: { [key: number /* int64 */]: ShardConn};
  total_guilds: number /* int64 */;
}
export interface StatusEndpointResponse {
  uptime: number /* int64 */;
  managers: StatusEndpointManager[];
}
export interface StatusEndpointManager {
  display_name: string;
  shard_groups: ShardGroup[];
}
export interface ShardGroup {
  shards: number /* int64 */[][];
}
export interface Resp {
  ok: boolean;
  data?: StatusEndpointResponse;
}

//////////
// source: users.go

/**
 * Represents a user on Antiraid
 */
export interface User {
  user?: PlatformUser /* from eureka-dovewing.ts */;
  state: string;
  vote_banned: boolean;
  created_at: string /* RFC3339 */;
  updated_at: string /* RFC3339 */;
}
export interface UserGuildBaseData {
  owner_id: string;
  name: string;
  icon?: string;
  roles: SerenityRole[];
  user_roles: string[];
  bot_roles: string[];
  channels: GuildChannelWithPermissions[];
  finished_onboarding: boolean;
}
