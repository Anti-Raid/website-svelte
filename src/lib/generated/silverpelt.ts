// Code generated by tygo. DO NOT EDIT.
import * as ext from "./ext"
import * as discordgo from "./discordgo"

//////////
// source: canonical_module.go
/*
From silverpelt/canonical_module
*/

export interface CanonicalCommandArgument {
  name: string;
  description?: string;
  required: boolean;
  choices: string[];
}
export interface CanonicalCommand {
  name: string;
  qualified_name: string;
  description?: string;
  nsfw: boolean;
  subcommands: CanonicalCommand[];
  subcommand_required: boolean;
  arguments: CanonicalCommandArgument[];
}

//////////
// source: config_opts.go

export interface CanonicalSettingsError {
  OperationNotSupported?: {
    operation: CanonicalOperationType;
  };
  Generic?: {
    message: string;
    src: string;
    typ: string;
  };
  SchemaTypeValidationError?: {
    column: string;
    expected_type: string;
    got_type: string;
  };
  SchemaNullValueValidationError?: {
    column: string;
  };
  SchemaCheckValidationError?: {
    column: string;
    check: string;
    error: string;
    accepted_range: string;
  };
  MissingOrInvalidField?: {
    field: string;
    src: string;
  };
  RowExists?: {
    column_id: string;
    count: number /* int64 */;
  };
  RowDoesNotExist?: {
    column_id: string;
  };
  MaximumCountReached?: {
    max: number /* uint64 */;
    current: number /* uint64 */;
  };
}
export interface CanonicalColumnType {
  Scalar?: {
    inner: CanonicalInnerColumnType;
  };
  Array?: {
    inner: CanonicalInnerColumnType;
  };
}
export interface CanonicalInnerColumnTypeStringKind {
  Normal?: {
  };
  Token?: {
    default_length: number /* uint64 */;
  };
  Textarea?: {
    ctx: string;
  };
  TemplateRef?: {
    kind: string;
    ctx: string;
  };
  User?: {
  };
  Role?: {
  };
  Emoji?: {
  };
  Message?: {
  };
  Channel?: {
    needed_bot_permissions: string;
    allowed_channel_types: string[];
  };
}
export interface CanonicalInnerColumnType {
  Uuid?: {
  };
  String?: {
    min_length?: number /* int */;
    max_length?: number /* int */;
    allowed_values?: string[];
    kind?: CanonicalInnerColumnTypeStringKind;
  };
  Timestamp?: {
  };
  TimestampTz?: {
  };
  Interval?: {
  };
  Integer?: {
  };
  Float?: {
  };
  BitFlag?: {
    values: Record<string, number /* int64 */>;
  };
  Boolean?: {
  };
  Json?: {
    max_bytes?: number /* int */;
  };
}
export interface CanonicalColumnSuggestion {
  Static?: {
    suggestions: string[];
  };
  None?: {
  };
}
export interface CanonicalColumn {
  id: string;
  name: string;
  description: string;
  column_type: CanonicalColumnType;
  nullable: boolean;
  suggestions: CanonicalColumnSuggestion;
  secret: boolean;
  ignored_for: CanonicalOperationType[];
}
export type CanonicalOperationType = string;
export const View: CanonicalOperationType = "View";
export const Create: CanonicalOperationType = "Create";
export const Update: CanonicalOperationType = "Update";
export const Delete: CanonicalOperationType = "Delete";
export interface CanonicalConfigOption {
  id: string;
  name: string;
  description: string;
  primary_key: string;
  title_template: string;
  columns: CanonicalColumn[];
  operations: CanonicalOperationType[];
}

//////////
// source: db__interface.go

export type DbConn = any;
